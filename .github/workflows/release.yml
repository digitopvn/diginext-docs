name: Release Workflow

# TRIGGERS
on:
  push:
    branches:
      - main
      - beta

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref }}

# CI/CD STEPS
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'ci(') == false
    
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run build
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        run: pnpm build

      - name: Release GITHUB package
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        run: npx semantic-release
      
      - name: Update "package.json" version
        run: pnpm pkg-version

      - name: Commit and push latest "package.json" file
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore(package.json): update version [skip ci]"
          commit_options: '--allow-empty --no-verify --signoff'

      - uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: build

  docker-main:
    name: Release Docker Image (MAIN)
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: build

      - name: Checkout latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo $LATEST_TAG
      - run: echo ${{env.LATEST_TAG}}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
          
      - name: Build & push to Docker Hub (main)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: digitop/diginext-docs:${{env.LATEST_TAG}},digitop/diginext-docs:latest
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext-docs:cache
          cache-to: type=registry,ref=digitop/diginext-docs:cache,mode=max

  # docker-beta:
  #   name: Release Docker Image (BETA)
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: always() && !cancelled() && !failure() && contains(github.ref, 'beta')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.CI_GITHUB_TOKEN }}

  #     - name: Download build artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-artifact
  #         path: build

  #     - name: Checkout latest release tag
  #       run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
  #     - run: echo $LATEST_TAG

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx
          
  #     - name: Build & push to Docker Hub (beta)
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: Dockerfile
  #         push: true
  #         tags: digitop/diginext-docs:${{env.LATEST_TAG}},digitop/diginext-docs:beta
  #         # platforms: |
  #         #   linux/amd64
  #         #   linux/arm64
  #         cache-from: type=registry,ref=digitop/diginext-docs:cache-beta
  #         cache-to: type=registry,ref=digitop/diginext-docs:cache-beta,mode=max

  # deploy-main:
  #   name: Deploy to [docs.diginext.site]
  #   runs-on: ubuntu-latest
  #   needs: [docker-main]
  #   if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
  #   steps:
  #     - name: Setup Kubernetes Tools
  #       uses: yokawasa/action-setup-kube-tools@v0.9.3
  #       with:
  #         kubectl: '1.24.10'

  #     - run: kubectl version --client
  #     - run: kubectl config get-contexts
  #     - run: kubectl config current-context
  #     - run: kubectl config use-context digitop-cluster

  #     - name: Set image to [docs.diginext.site] deployment
  #       run: kubectl --context=digitop-cluster -n diginext-docs set image deployment/diginext-docs diginext-docs=digitop/diginext-docs:$LATEST_TAG

  deploy-beta:
    name: Deploy to [docs-beta.diginext.site]
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'beta')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy to Diginext
        uses: digitopvn/diginext-actions@v0
        env:
          CLUSTER: topgroup-k3s
          REGISTRY: digitopdockerhub-u
        with:
          dx_key: ${{ secrets.DX_KEY }}
          cluster: ${{ env.CLUSTER }}
          registry: ${{ env.REGISTRY }}
          port: "3001"